--- /home/dmo/drupal/drupal-4.3.0/modules/user.module	2003-10-31 16:00:06.000000000 -0500
+++ modules/user.module	2003-12-13 12:19:25.000000000 -0500
@@ -43,8 +43,10 @@
 }
 
 function sess_destroy($key) {
+  global $user;
 
   db_query("DELETE FROM {sessions} WHERE sid = '$key'");
+  module_invoke_all("destroy", $user, $key);
 
 }
 
@@ -442,7 +444,7 @@
 
           $output .= "</div>\n";
 
-          if (variable_get("user_register", 1)) {
+          if (_user_register_permitted()) { 
             $items[] = l(t("Create new account"), "user/register", array("title" => t("Create a new user account.")));
           }
           $items[] = l(t("Request new password"), "user/password", array("title" => t("Request new password via e-mail.")));
@@ -495,6 +497,7 @@
 
   if ($type == "system") {
     global $user;
+	global $_list;
     if ($user->uid) {
       menu("user/edit", t("my account"), "user_page", 8);
       menu("user/logout", t("log out"), "user_page", 10);
@@ -595,51 +598,70 @@
     $error = t("The name '%s' has been denied access.", array("%s" => $edit["name"]));
   }
   else if ($edit["name"] && $edit["pass"]) {
-
-    /*
-    ** Try to log in the user locally:
-    */
-
-    if (!$user->uid) {
-      $name = $edit["name"];
-      $pass = $edit["pass"];
-      $user = user_load(array("name" => $name, "pass" => $pass, "status" => 1));
-    }
-
     /*
     ** Strip name and server from ID:
     */
-
     if ($server = strrchr($edit["name"], "@")) {
       $name = substr($edit["name"], 0, strlen($edit["name"]) - strlen($server));
       $server = substr($server, 1);
       $pass = $edit["pass"];
+    } else {
+      $name = $edit["name"];
+      $pass = $edit["pass"];
+      $server = NULL;
     }
 
-    /*
-    ** When possible, determine corrosponding external auth source. Invoke source, and login user if successful:
-    */
-
-    if (!$user->uid && $server && $result = user_get_authmaps("$name@$server")) {
-      if (module_invoke(key($result), "auth", $name, $pass, $server)) {
-        $user = user_external_load("$name@$server");
-        watchdog("user", "external load: $name@$server, module: ". key($result));
-      }
-      else {
-        $error = t("Invalid password for %s.", array("%s" => "<i>$name@$server</i>"));
-      }
+    /* 
+	 * FIXME: evil hack!
+	 * First, we try to log the user in locally.  If this doesn't work,
+	 * we set $server to 'ocua' which will force the login to occur via
+	 * Leaguerunner.
+	 */
+	if( ! $server ) {
+      $user = user_load(array("name" => $name, "pass" => $pass, "status" => 1));
     }
+	if( !$user->uid ) {
+	  $server = 'ocua';
+	}
 
-     /*
-    ** Try each external authentication source in series. Register user if successful.
+    /*
+    ** Now, check if user might be external
     */
-
-    else if (!$user->uid && $server) {
-      foreach (module_list() as $module) {
-        if (module_hook($module, "auth")) {
-          if (module_invoke($module, "auth", $name, $pass, $server)) {
-            if (variable_get("user_register", 1) == 1 && !user_load(array("name" => "$name@$server"))) { //register this new user
-              $user = user_save("", array("name" => "$name@$server", "pass" => user_password(), "init" => "$name@$server", "status" => 1, "authname_$module" => "$name@$server", "rid" => _user_authenticated_id()));
+    if( !$user->uid && $server ) {
+      /*
+      ** Determine corrosponding external auth source. Invoke source, and
+      login user if successful:
+      */
+      if( $result = user_get_authmaps("$name@$server") ) {
+        $remoteInfo = module_invoke(key($result), "auth", $name, $pass, $server);
+        if($remoteInfo) {
+          $user = user_external_load("$name@$server");
+          if(is_array($remoteInfo)) {
+            /* update local Drupal user with remote info */
+            $user = user_save($user, $remoteInfo);
+          }
+          watchdog("user", "external load: $name@$server, module: ". key($result));
+        }
+        else {
+          $error = t("Invalid password for %s.", array("%s" => "<i>$name@$server</i>"));
+        }
+      } 
+      else {
+        /*
+        ** Try each external authentication source in series.  Register user if successful.
+        */
+        foreach (module_list() as $module) {
+          if (module_hook($module, "auth") && ($remoteInfo = module_invoke($module, "auth", $name, $pass, $server))) {
+  			$user_register = variable_get("user_register", 1);
+            if ($user_register == 3 && !user_load(array("name" => "$name@$server"))) { 
+       	      watchdog("user", "register permitted, user doesn't yet exist. ");
+              /* Auth source matches $server, so register new user */
+              $localInfo = array("name" => "$name@$server", "pass" => 'distributed auth - no local password', "init" => "$name@$server", "status" => 1, "authname_$module" => "$name@$server", "rid" => _user_authenticated_id());
+        
+              /* Now merge in any remote fields we want to override */
+              $localInfo = array_merge($localInfo, $remoteInfo);
+          
+              $user = user_save("", $localInfo);
               watchdog("user", "new user: $name@$server ($module ID)", l(t("edit user"), "admin/user/edit/$user->uid"));
               break;
             }
@@ -712,7 +734,7 @@
     $output .= "<p>$msg</p>";
   }
   if (count(user_auth_help_links()) > 0) {
-    $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64, t("Enter your %s username, or an ID from one of our affiliates: %a.", array("%s" => variable_get("site_name", "local"), "%a" => implode(", ", user_auth_help_links()))));
+    $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64, t("Enter your %s username, or an ID from %a.", array("%s" => variable_get("site_name", "local"), "%a" => implode(", ", user_auth_help_links()))));
   }
   else {
     $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64, t("Enter your %s username.", array("%s" => variable_get("site_name", "local"))));
@@ -721,7 +743,7 @@
   $output .= form_checkbox(t("Remember me"), "remember_me", 1, 0, 0);
   $output .= form_submit(t("Log in"));
   $items[] = l(t("Request new password"), "user/password");
-  if (variable_get("user_register", 1)) {
+  if (_user_register_permitted()) { 
     $items[] = l(t("Create new account"), "user/register");
   }
   $output .= theme("theme_item_list", $items);
@@ -729,6 +751,19 @@
   return form($output, "post", url("user"));
 }
 
+/*
+ * Return true if user_register setting allows creation of new
+ * account
+ */
+function _user_register_permitted() {
+  $user_register = variable_get("user_register", 1);
+  if ($user_register > 0 && $user_register < 3) {
+    return true;
+  }
+
+  return false;
+}
+
 function _user_authenticated_id() {
   return db_result(db_query("SELECT rid FROM {role} WHERE name = 'authenticated user'"));
 }
@@ -760,13 +795,23 @@
   global $base_url;
 
   if ($edit["name"]) {
-    $account = db_fetch_object(db_query("SELECT uid, name, mail FROM {users} WHERE name = '%s'", $edit["name"]));
+    $account = db_fetch_object(db_query("SELECT uid, name, init, mail FROM {users} WHERE name = '%s'", $edit["name"]));
     if (!$account) $error = t("Sorry. The username <i>%s</i> is not recognized.", array("%s" => $edit["name"]));
   }
   else if ($edit["mail"]) {
-    $account = db_fetch_object(db_query("SELECT uid, name, mail FROM {users} WHERE mail = '%s'", $edit["mail"]));
+    $account = db_fetch_object(db_query("SELECT uid, name, init, mail FROM {users} WHERE mail = '%s'", $edit["mail"]));
     if (!$account) $error = t("Sorry. The e-mail address <i>%s</i> is not recognized.", array("%s" => $edit["mail"]));
   }
+
+  /* 
+   * Ensure that this isn't a distributed auth account.  If it is, send an
+   * email warning user that their password must be changed elsewhere.
+   */
+  if( $account && user_get_authmaps($account->init) ) {
+    $error = t("Sorry.  Passwords cannot be changed here for distributed authentication accounts.  You must go to the original site and change your password there.");
+    unset($account);
+  }
+  
   if ($account) {
 
       $from = variable_get("site_mail", ini_get("sendmail_from"));
@@ -807,13 +852,13 @@
     /*
     ** Display form:
     */
-
-    $output .= "<p>". sprintf(t("Enter your username %sor%s your e-mail address."), "<b><i>", "</i></b>") ."</p>";
+    $output .= '<p>' . t("Administrative users may use this form if they have forgotten the password for their Drupal account.  Note that this is <b>not</b> for regular members!  If you wish to request a new Leaguerunner password, you must use the link available <a href=\"http://www.ocua.ca/leaguerunner/\">here</a>") . '</p>';
+    $output .= "<p>". t("To request a new password, enter <b><i>either</i></b> your username <b><i>or</i></b> your e-mail address.") ."</p>";
     $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64);
     $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 64);
     $output .= form_submit(t("E-mail new password"));
     $items[] = l(t("Log in"), "user/login");
-    if (variable_get("user_register", 1)) {
+    if (_user_register_permitted()) { 
       $items[] = l(t("Create new account"), "user/register");
     }
     $output .= theme("theme_item_list", $items);
@@ -834,7 +879,7 @@
     drupal_goto(url("user/edit"));
   }
 
-  if ($edit["name"] && $edit["mail"]) {
+  if (!(is_null($edit["name"]) && is_null($edit["mail"]))) {
     if ($error = user_validate_name($edit["name"])) {
       // do nothing
     }
@@ -856,6 +901,9 @@
     else if (variable_get("user_register", 1) == 0) {
       $error = t("Public registrations have been disabled by the site administrator.");
     }
+    else if (variable_get("user_register", 1) == 4) {
+      $error = t("Public registrations have been disabled by the site administrator.");
+    }
     else {
       foreach (module_list() as $module) {
         if (module_hook($module, "user")) {
@@ -934,7 +982,7 @@
   $affiliates = user_auth_help_links();
   if (count($affiliates) > 0) {
     $affiliates = implode(", ", $affiliates);
-    $output .= "<p>". t("Note: If you have an account with one of our affiliates (%s), you may ". l("login now", "user/login") ." instead of registering.", array("%s" => $affiliates)) ."</p>";
+    $output .= "<p>". t("Note: If you have an account with %s, you may ". l("login now", "user/login") ." instead of registering.", array("%s" => $affiliates)) ."</p>";
   }
   $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64, t("Your full name or your preferred username: only letters, numbers and spaces are allowed."));
   $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 64, t("A password and instructions will be sent to this e-mail address, so make sure it is accurate."));
@@ -1057,12 +1105,23 @@
       $edit = object2array($user);
     }
 
-    $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 55, t("Your full name or your preferred username: only letters, numbers and spaces are allowed."));
-    $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 55, t("Insert a valid e-mail address.  All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail."));
+	if( $result = user_get_authmaps($user->init) ) {
+      $remoteFields = module_invoke(key($result), "remote_fields");
+    } else {
+      $remoteFields = array();
+    }
+    if( !in_array('name',$remoteFields) ) {
+      $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 55, t("Your full name or your preferred username: only letters, numbers and spaces are allowed."));
+    }
+    if( !in_array('mail',$remoteFields) ) {
+      $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 55, t("Insert a valid e-mail address.  All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail."));
+    }
 
     $output .= implode("\n", module_invoke_all("user", "edit_form", $edit, $user));
 
-    $output .= form_item(t("Password"), "<input type=\"password\" name=\"edit[pass1]\" size=\"12\" maxlength=\"24\" /> <input type=\"password\" name=\"edit[pass2]\" size=\"12\" maxlength=\"24\" />", t("Enter your new password twice if you want to change your current password or leave it blank if you are happy with your current password."));
+    if( !in_array('pass1', $remoteFields) ) {
+      $output .= form_item(t("Password"), "<input type=\"password\" name=\"edit[pass1]\" size=\"12\" maxlength=\"24\" /> <input type=\"password\" name=\"edit[pass2]\" size=\"12\" maxlength=\"24\" />", t("Enter your new password twice if you want to change your current password or leave it blank if you are happy with your current password."));
+    }
     $output .= form_submit(t("Save user information"));
 
     $output = form($output, "post", 0, array("enctype" => "multipart/form-data"));
@@ -1120,10 +1179,9 @@
     $output = user_login();
     theme("header", t("User login"));
     theme("box", t("User login"), $output);
-    if (variable_get("user_register", 1)) {
+    if (_user_register_permitted()) { 
       theme("box", t("Create new user account"), user_register());
     }
-    theme("box", t("Request new password"), user_pass());
     theme("footer");
   }
 }
@@ -1148,7 +1206,7 @@
     case "register":
       $output = user_register($edit);
       theme("header", t("Create new account"));
-      if (variable_get("user_register", 1)) {
+      if (_user_register_permitted()) { 
         theme("box", t("Create new account"), $output);
       }
       else {
@@ -1223,7 +1281,7 @@
 }
 
 function user_settings() {
-  $output .= form_select(t("Public registrations"), "user_register", variable_get("user_register", 1), array(t("Only site administrators can create new user accounts."), t("Visitors can create accounts and no administrator approval is required."), t("Visitors can create accounts but administrator approval is required.")));
+  $output .= form_select(t("Public registrations"), "user_register", variable_get("user_register", 1), array(t("Only site administrators can create new user accounts."), t("Visitors can create accounts and no administrator approval is required."), t("Visitors can create accounts but administrator approval is required."),t("Only site administrators and distributed authentication modules can create new accounts")));
 
   $output .= form_select(t("Remember authenticated users"), "user_remember", variable_get("user_remember", 0), array(t("Let the user decide whether he should be logged out when leaving the site."), t("Authenticated users are not logged out upon leaving the site."), t("Authenticated users are logged out upon leaving the site.")));
 
@@ -1713,8 +1771,7 @@
       $site = variable_get("site_name", "this website");
 
       $output .= "<h3>Distributed authentication<a id=\"da\"></a></h3>";
-      $output .= "<p>One of the more tedious moments in visiting a new website is filling out the registration form. Here at %site, you do not have to fill out a registration form if you are already a member of %help-links. This capability is called <i>Distributed Authentication</i>, and is unique to %drupal, the software which powers %site.</p>";
-      $output .= "<p>Distributed authentication enables a new user to input a username and password into the login box, and immediately be recognized, even if that user never registered at %site. This works because Drupal knows how to communicate with external registration databases. For example, lets say that new user 'Joe' is already a registered member of %delphi-forums. Drupal informs Joe on registration and login screens that he may login with his Delphi ID instead of registering with %site. Joe likes that idea, and logs in with a username of joe@remote.delphiforums.com and his usual Delphi password. Drupal then contacts the <i>remote.delphiforums.com</i> server behind the scenes (usually using %xml, %http-post, or %soap) and asks: \"Is the password for user Joe correct?\".  If Delphi replies yes, then we create a new %site account for Joe and log him into it.  Joe may keep on logging into %site in the same manner, and he will always be logged into the same account.</p>";
+      $output .= "<p>One of the more tedious moments in visiting a new website is filling out the registration form. Here at the %site website, you do not have to fill out a registration form if you are already have a %help-links account. This capability is called <i>Distributed Authentication</i>, and is unique to %drupal, the software which powers this site.</p>";
 
       $output = t($output, array("%help-links" => (implode(", ", user_auth_help_links())), "%site" => "<i>$site</i>", "%drupal" => "<a href=\"http://www.drupal.org\">Drupal</a>", "%delphi-forums" => "<a href=\"http://www.delphiforums.com\">Delphi Forums</a>", "%xml" => "<a href=\"http://www.xmlrpc.com\">XML-RPC</a>", "%http-post" => "<a href=\"http://www.w3.org/Protocols/\">HTTP POST</a>", "%soap" => "<a href=\"http://www.soapware.org\">SOAP</a>"));
 
