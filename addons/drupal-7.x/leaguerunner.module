<?php

/**
 * Implements hook_menu()
 */
function leaguerunner_menu() {
	$items['admin/config/system/leaguerunner'] = array(
		'title' => 'Leaguerunner',
		'description' => 'Configure how Leaguerunner interacts with Drupal.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('leaguerunner_admin_form'),
		'access arguments' => array('administer leaguerunner'),
		'file' => 'leaguerunner.pages.inc',
	);

  $items['admin/config/system/leaguerunner/default'] = array(
    'title' => 'Leaguerunner',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

	return $items;
}

/**
 * Implements hook_permission()
 */
function leaguerunner_permission() {
	return array(
    'administer leaguerunner' => array(
      'title' => t('Administer Leaguerunner'),
	  ),
	  'email membership' => array(
	    'title' => t('Email Membership with new Posts'),
	  ),
	);
}

/**
 * Implements hook_form_alter()
 */
function leaguerunner_form_alter(&$form, $form_state, $form_id) {
	// Don't add if not configured
	$email_membership = variable_get('leaguerunner_email_membership',0);
	if(!$email_membership) {
		return;
	}

	// Don't add if not allowed
	$account = user_load($GLOBALS['user']->uid);
	if (!user_access('email membership', $account)) {
		return;
	}

	// Alter any node forms.
	if (isset($form['#node']) && $form['#node']->type . '_node_form' == $form_id) {
		// If we haven't enabled Leaguerunner Email on this node type, do nothing.
		$type = $form['#node']->type;
		$allowed_types = variable_get('leaguerunner_post_types', array('story' => 'story', 'blog' => 'blog'));
		if (empty($allowed_types[$type])) {
			return;
		}

		$form['leaguerunner'] = array(
	      '#type' => 'fieldset',
	      '#title' => t('Leaguerunner'),
	      '#collapsible' => TRUE,
	      '#collapsed' => FALSE,
	      '#tree' => TRUE,
		);
		$form['leaguerunner']['post'] = array(
	      '#type' => 'checkbox',
	      '#title' => t('Email Membership about this post.'),
	      '#default_value' => (empty($form['nid']['#value'])),
		);
	}
}

/**
 * Implementation of hook_node_insert().
 *
 * Intercepts newly published nodes and emails Leaguerunner Membership
 */
function leaguerunner_node_insert($node) {
  if(!empty($node->status) && !empty($node->leaguerunner) && !empty($node->leaguerunner['post'])) {
    module_load_include('inc', 'leaguerunner');
    $email_addresses = '';
debug($node);
    // pull email addresses from Leaguerunner
    db_set_active('leaguerunner');
    $records = db_select('person', 'p')
      ->fields('p', array('email'))
      ->execute();

    foreach($records as $person) {
    	$email_addresses .= $person->email . ',';
    }
    db_set_active();
    
    $summary = field_get_items('node', $node, 'summary', $node->language);
    debug($summary);
    //Add Outbound email to Queue to send out via cron
    //leaguerunner_rules_action_mail($email_addresses, $node['title'],  );
  }
}

/**
* Implementation of hook_node_update().
*/
function leaguerunner_node_update($node) {
	leaguerunner_node_insert($node);
}
/**
 * Implements login_block_alter()
 */
function leaguerunner_form_user_login_block_alter(&$form, &$form_state) {
  _leaguerunner_login_user_login_form_alter($form, $form_state);
}

/**
 * Implements user_login_alter()
 */
function leaguerunner_login_form_user_login_alter(&$form, &$form_state) {
  _leaguerunner_login_user_login_form_alter($form, $form_state);
}

/**
 * Authenticates user against Leaguerunner DB
 */
function _leaguerunner_login_user_login_form_alter(&$form, &$form_state) {
  $saveForm = $form;

  $form = array();

  foreach( $saveForm as $key => $value ) {
    if( $key == '#validate' ) {
      $form[ $key ] = array();
      foreach( $value as $validator ) {
        if( $validator == 'user_login_authenticate_validate' ) {
        	if(variable_get('leaguerunner_authenticate', 0)) {
           // $validator = 'leaguerunner_login_authenticate_validate';
        	}
        }
        $form[ $key ][] = $validator;
      }
    } else {
      $form[ $key ] = $value;
    }
  }
}

/**
 * Authenticate against Leaguerunner DB
 */
function leaguerunner_loging_authenticate_validate($form, $form_state) {
  $name = $form_state[ 'values' ][ 'name' ];
  $pass = $form_state[ 'values' ][ 'pass' ];

  if( $name == "admin" ) {
    user_login_authenticate_validate( $form, $form_state );
  } else {
    //... custom code to verify credentials ...
    // call through to lr db via Drupal's abstraction layers.
    // see https://www.touchnoc.com/node/86 for details
    $form_state['uid'] = $drupalUser->uid;
  }
}