<?php

function leaguerunner_help($section) {
  $output = null;
  switch($section) {
    case 'admin/system/modules#description':
      $output = t("Lets users log in using a Leaguerunner ID.");
	  break;
	case 'user/help#leaguerunner':
	  $output = t("If you have an account on OCUA's Leaguerunner system (<a href=\"http://www.ocua.ca/leaguerunner/\">http://www.ocua.ca/leaguerunner/</a>), you may log in using your Leaguerunner username.");
	  break;
  } 
  return $output;
}

function leaguerunner_settings() {
  $output = form_textfield("Leaguerunner database name", "leaguerunner_dbname", variable_get("leaguerunner_dbname", "leaguerunner"), 55, 128, "The name of your Leaguerunner database.  Must be accessible by the database user configured for Drupal.");

  return $output;
}

/**
 * Here, we validate the user in the Leaguerunner db.
 */
function leaguerunner_auth($username, $password, $userServer) {

  if($userServer !== 'ocua') {
    return 0;
  }

  $lrUser = _leaguerunner_user_load( array('username' => $username, 'password' => $password));

  if($lrUser->status == 'inactive') {
	_leaguerunner_set_session( $lrUser, session_id() );
	drupal_goto('/leaguerunner/person/activate&next='. base64_encode('http://www.ocua.ca/'));
  }
  

  if($lrUser) {
    _leaguerunner_set_session( $lrUser, session_id() );
    return array(
	  'mail' => $lrUser->email,
	  'name' => "$lrUser->firstname $lrUser->lastname",
	);
  } 
  return 0;
}

function leaguerunner_remote_fields() {
	return array ( 'mail', 'name', 'pass1', 'pass2');
}

function leaguerunner_user ($type, $edit, $user) {

  $result = user_get_authmaps($user->init);
  if(!$result['leaguerunner']) {
    return '';
  }

  switch($type) {
    case "view_private":
    case "edit_form":
	  return array(form_item(t("Other Information"), "The remainder of your private information is stored in <a href='/leaguerunner'>Leaguerunner</a>."));
    case "edit_validate":
	  foreach(leaguerunner_remote_fields() as $field) {
	    if(in_array($field, array_keys($edit))) {
			$error .= "Cannot edit $field on a leaguerunner user<br />";
		}
	  }
	  return $error ? $error : $edit;
  }
}

/**
 * Destroy a Leaguerunner session.  Should get called by sess_destroy()
 * in user.module.
 */
function leaguerunner_destroy( $user, $key ) {
  $lr_dbname = variable_get("leaguerunner_dbname", "leaguerunner");
  /* Nuke session cookie for Leaguerunner */  
  db_query("UPDATE $lr_dbname.person SET session_cookie = NULL WHERE session_cookie = '%s'", $key);
}

function _leaguerunner_set_session ( $lrUser, $sess ) {
  $lr_dbname = variable_get("leaguerunner_dbname", "leaguerunner");
  /* Also set session cookie for Leaguerunner */  
  db_query("UPDATE $lr_dbname.person SET session_cookie = '%s', last_login = NOW(), client_ip = '%s' WHERE user_id = %d", $sess, $_SERVER['REMOTE_ADDR'], $lrUser->user_id);
}

function _leaguerunner_user_load ($array = array() ) {
  $lr_dbname = variable_get("leaguerunner_dbname", "leaguerunner");
  $query = "";
  foreach ($array as $key => $value) {
    if ($key == "password") {
      $query .= "u.$key = '". md5($value) ."' AND ";
    }
    else {
      $query .= "u.$key = '". check_query($value) ."' AND ";
    }
  }
  $result = db_query_range("SELECT u.* FROM $lr_dbname.person u WHERE $query (status = 'active' OR status = 'inactive')", 0, 1);

  $user = db_fetch_object($result);
  return $user;
}

function _leaguerunner_next_games (  ) {
  $player = _leaguerunner_user_load( array('session_cookie' => session_id()));
  
  $lr_dbname = variable_get("leaguerunner_dbname", "leaguerunner");

  $result = db_query("select s.game_id, UNIX_TIMESTAMP(CONCAT(g.game_date,' ',g.game_start)) AS date, IF(s.home_team = t.team_id,home.name,away.name) AS myteam, IF(s.home_team = t.team_id,away.name,home.name) AS opponent FROM $lr_dbname.schedule s, $lr_dbname.gameslot g, $lr_dbname.teamroster t INNER JOIN $lr_dbname.team home ON (home.team_id = s.home_team) INNER JOIN $lr_dbname.team away ON (away.team_id = s.away_team) WHERE ((s.home_team = t.team_id OR s.away_team = t.team_id) AND t.player_id = %d) AND g.game_date >= NOW()  ORDER BY g.game_date asc LIMIT 3", $player->user_id);

  $games = array();
  while($item = db_fetch_object($result)) {
    $games[] = $item;
  }
  return $games;
}

function leaguerunner_count_games_for_date ( $year, $month, $day )
{
  $lr_dbname = variable_get("leaguerunner_dbname", "leaguerunner");
  
  $result = db_query("select COUNT(*) from $lr_dbname.gameslot WHERE game_date = '%d-%d-%d' AND NOT ISNULL(game_id)", $year, $month, $day);
  $numGames = db_result($result);
  
  return $numGames;
}

function leaguerunner_info($field = 0) {
  $info["name"] = "leaguerunner";

  if ($field) {
    return $info[$field];
  }
  else {
    return $info;
  }
}

/**
 * Here we need to create our own user info block that doesn't
 * present the ability to edit settings for Leaguerunner-authenticated users.
 * Also creates a 'My Games' block for upcoming games.
 */
function leaguerunner_block($op = "list", $delta = 0) {
  global $user;

  $edit = $_POST["edit"];

  if ($op == "list") {
     $blocks[0]["info"] = t("Leaguerunner game data for logged-in user");
     return $blocks;
  }
  else {
    switch ($delta) {
      case 0:
        if ($user->uid) {
	      $authmap = user_get_authmaps($user->init);
	      if($authmap['leaguerunner'] ) {
	        $lrUser = _leaguerunner_user_load( array( 'session_cookie' => session_id()));
            $output = "<div class=\"next-games\">\n";
            $games = _leaguerunner_next_games();
            if(count($games)) {
              foreach ($games as $game) {
                $minutesleft = ( $game->date - time()) / 60;
                if ( $minutesleft < 90 )
                  $timeleft = round($minutesleft) . " " . t('minutes');
                else if ( $minutesleft < (2*24*60) )
                  $timeleft = round($minutesleft/60) . " " . t('hours');
                else
                  $timeleft = round($minutesleft/(24*60)) . " " . t('days');

  	            $items[] = "<a href=\"/leaguerunner/game/view/$game->game_id\">$game->myteam vs. $game->opponent</a> ($timeleft)";
              }

              $output .= theme("item_list", $items);
            } else {
              $output .= "No games scheduled";
            }
            $output .= "</div>\n";

		    $block["subject"] = "My Games";
			$block["content"] = $output;
			return $block;
          }
        }
    }
  }
}
?>
